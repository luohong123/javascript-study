(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{208:function(t,a,s){"use strict";s.r(a);var e=s(0),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p",[t._v("位运算的运用(Bitwise operations)")]),t._v(" "),s("ol",[s("li",[t._v("位运算符")]),t._v(" "),s("li",[t._v("算数移位与逻辑移位")]),t._v(" "),s("li",[t._v("位运算的应⽤")])]),t._v(" "),s("h2",{attrs:{id:"什么是位运算"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么是位运算","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是位运算")]),t._v(" "),s("p",[t._v("程序中的所有数在计算机内存中都是以二进制的形式储存都。位运算说穿了，就是直接对整数在内存中的二进制位进行操作。比如， and 运算本来是一个逻辑运算符，但是整数与整数之间也可以进行 and 运算。举个例子， 6 的二进制是 110，11 的二进制是 1011， 那么 6 and 11 的结果为 2， 它是二进制对应位进行逻辑运算的结果（0 表示 false, 1 表示 true， 空位都当 0 处理）")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[s("span",{pre:!0,attrs:{class:"token number"}},[t._v("110")]),t._v(" AND "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1011")]),t._v(" --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 0010"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" --"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("d"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("p",[t._v("由于位运算直接对内存数据进行操作，不需要转成十进制，因此处理速度非常快。当然有人说，这个快了有什么用，计算 6 and 11 没有什么实际意义啊。那么位运算到底可以干什么，有什么经典应用，以及如何用位运算优化你的程序。")]),t._v(" "),s("h2",{attrs:{id:"编程常用的位运算操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#编程常用的位运算操作","aria-hidden":"true"}},[t._v("#")]),t._v(" 编程常用的位运算操作")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("X & 1 == 1 OR == 0")])]),t._v(" "),s("li",[s("p",[t._v("X = X & (X-1) => 清零最低位的 1")])]),t._v(" "),s("li",[s("p",[t._v("X & -X => 得到最低位的 1")])]),t._v(" "),s("li",[s("p",[t._v("X & ~X => 0")]),t._v(" "),s("p",[t._v("位运算操作")])])]),t._v(" "),s("ol",[s("li",[t._v("X & 1 == 1 OR == 0 判断奇偶 (X % 2 == 1)")]),t._v(" "),s("li",[t._v("X = X & (X-1) => 清零最低位的 1")]),t._v(" "),s("li",[t._v("X & -X => 得到最低位的 1")])]),t._v(" "),s("h2",{attrs:{id:"不同编程语言的语法问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#不同编程语言的语法问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 不同编程语言的语法问题")]),t._v(" "),s("ul",[s("li",[t._v("Python: x, y = 1, 2")]),t._v(" "),s("li",[t._v("Java or C++: x=1; y=2;")]),t._v(" "),s("li",[t._v("Python: x, y = y, x (可以有效实现交换两数)")]),t._v(" "),s("li",[t._v("Java or C++: int tmp = x; x = y; y = tmp;")])]),t._v(" "),s("h2",{attrs:{id:"实战题⽬"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战题⽬","aria-hidden":"true"}},[t._v("#")]),t._v(" 实战题⽬")]),t._v(" "),s("ol",[s("li",[t._v("https://leetcode.com/problems/number-of-1-bits/")]),t._v(" "),s("li",[t._v("https://leetcode.com/problems/power-of-two/")]),t._v(" "),s("li",[t._v("https://leetcode.com/problems/counting-bits/description/")]),t._v(" "),s("li",[t._v("https://leetcode.com/problems/n-queens-ii/description/")])])])}),[],!1,null,null,null);a.default=r.exports}}]);