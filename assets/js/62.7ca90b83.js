(window.webpackJsonp=window.webpackJsonp||[]).push([[62],{209:function(t,a,r){"use strict";r.r(a);var e=r(0),_=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"第-5-章-引用类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#第-5-章-引用类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 第 5 章 引用类型")]),t._v(" "),r("img",{attrs:{src:"https://github.com/luohong123/js-advance-program/blob/master/%E7%AC%AC%205%20%E7%AB%A0%20%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/%E7%AC%AC%205%20%E7%AB%A0%20%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B.png"}}),t._v(" "),r("h2",{attrs:{id:"_5-1-object-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-object-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.1 Object 类型")]),t._v(" "),r("h3",{attrs:{id:"_1、建议使用点表示法，除非必须使用变量来访问属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、建议使用点表示法，除非必须使用变量来访问属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、建议使用点表示法，除非必须使用变量来访问属性")]),t._v(" "),r("h2",{attrs:{id:"_5-2-array-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-array-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.2 Array 类型")]),t._v(" "),r("h3",{attrs:{id:"_1、检测数组"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、检测数组","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、检测数组")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("(1)instanceof")]),t._v(" "),r("pre",[r("code",[t._v("\t- 问题\n\n\t\t- 假定只有一个全局执行环境。如果网页中包含多个框架，那实 际上就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的 Array 构造函数。如果你从 一个框架向另一个框架传入一个数组，那么传入的数组与在第二个框架中原生创建的数组分别具有各自不同的构造函数。\n")])])]),t._v(" "),r("li",[r("p",[t._v("(2)Array.isArray()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 支持浏览器\n\n\t\t- 有 IE9+、Firefox 4+、Safari 5+、Opera 10.5+和 Chrome\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_2、转换方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、转换方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、转换方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("(1)toString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串\n")])])]),t._v(" "),r("li",[r("p",[t._v("(2)toLocaleString()")])]),t._v(" "),r("li",[r("p",[t._v("(3)valueOf()")])]),t._v(" "),r("li",[r("p",[t._v("(4)join()")])])]),t._v(" "),r("h3",{attrs:{id:"_3、栈方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、栈方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、栈方法")]),t._v(" "),r("ul",[r("li",[t._v("Last-In-First-Out，后进先出")]),t._v(" "),r("li",[t._v("push() 数组末尾添加")]),t._v(" "),r("li",[t._v("pop() 数组末尾移除")])]),t._v(" "),r("h3",{attrs:{id:"_4、队列方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、队列方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 4、队列方法")]),t._v(" "),r("ul",[r("li",[t._v("First-In-Fisrt-Out, 先进先出")]),t._v(" "),r("li",[t._v("shift() 移除第一项")]),t._v(" "),r("li",[t._v("unshift() 在数组前端添加任意个项并返回新数组的长度")])]),t._v(" "),r("h3",{attrs:{id:"_5、重排序方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、重排序方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 5、重排序方法")]),t._v(" "),r("ul",[r("li",[t._v("reverse() 反转数组项")]),t._v(" "),r("li",[t._v("sort(函数)")])]),t._v(" "),r("h3",{attrs:{id:"_6、操作方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6、操作方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 6、操作方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("concat()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 基于当前数组中的所有项创建一个新数组,返回新构建的数组\n")])])]),t._v(" "),r("li",[r("p",[t._v("slice()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 基于当前数组中的一或多个项创建一个新数组,不会影响原始数组,如.slice(1,4)返回索引1到索引3位置的项\n")])])]),t._v(" "),r("li",[r("p",[t._v("splice()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 删除\n\n\t\t- 可以删除任意数量的项，只需指定 2 个参数:要删除的第一项的位置和要删除的项数。 例如，splice(0,2)会删除数组中的前两项\n\n\t- 插入\n\n\t\t- 可以向指定位置插入任意数量的项，只需提供 3 个参数:起始位置、0(要删除的项数) 和要插入的项\n\n\t- 替换\n\n\t\t- 可以向指定位置插入任意数量的项，且同时删除任意数量的项，只需指定 3 个参数\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_7、位置方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7、位置方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 7、位置方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("indexOf(要查找的项，查找起点位置的索引)")]),t._v(" "),r("pre",[r("code",[t._v("\t- 从数组的开头(位 置 0)开始向后查找,在没找到的情况下返回 -1\n")])])]),t._v(" "),r("li",[r("p",[t._v("lastIndexOf(要查找的项，查找起点位置的索引)")]),t._v(" "),r("pre",[r("code",[t._v("\t- 从数组的末尾开始向前查找,在没找到的情况下返回 -1\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_8、迭代方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8、迭代方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 8、迭代方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("every()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 对数组中的每一项运行给定函数，如果该函数对每一项都返回 true，则返回 true\n")])])]),t._v(" "),r("li",[r("p",[t._v("filter()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 对数组中的每一项运行给定函数，返回该函数会返回 true 的项组成的数组\n")])])]),t._v(" "),r("li",[r("p",[t._v("forEach()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 对数组中的每一项运行给定函数。这个方法没有返回值\n")])])]),t._v(" "),r("li",[r("p",[t._v("map()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组\n")])])]),t._v(" "),r("li",[r("p",[t._v("some()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 对数组中的每一项运行给定函数，如果该函数对任一项返回 true，则返回 true\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_9、归并方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9、归并方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 9、归并方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("reduce()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 从数组的第一项开始，逐个遍历到最后\n")])])]),t._v(" "),r("li",[r("p",[t._v("reduceRight()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 从数组的最后一项开始，向前遍历到第一项\n")])])])]),t._v(" "),r("h2",{attrs:{id:"_5-3-date-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-date-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.3 Date 类型")]),t._v(" "),r("h3",{attrs:{id:"_1、继承的方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、继承的方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、继承的方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("toLacaleString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 按照与浏览器 设置的地区相适应的格式返回日期和时间\n")])])]),t._v(" "),r("li",[r("p",[t._v("toString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 返回带有时区信息的日期和 时间\n")])])]),t._v(" "),r("li",[r("p",[t._v("valueOf()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 不返回字符串，而是返回日期的毫秒表示\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_2、日期格式化方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、日期格式化方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、日期格式化方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("toDateString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 以特定于实现的格式显示星期几、月、日和年\n")])])]),t._v(" "),r("li",[r("p",[t._v("toTimeString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 以特定于实现的格式显示时、分、秒和时区\n")])])]),t._v(" "),r("li",[r("p",[t._v("toLocaleDateString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 以特定于地区的格式显示星期几、月、日和年\n")])])]),t._v(" "),r("li",[r("p",[t._v("toLocaleTimeString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 以特定于实现的格式显示时、分、秒\n")])])]),t._v(" "),r("li",[r("p",[t._v("toUTCString()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 以特定于实现的格式完整的 UTC 日期\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_3、日期-时间组件方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、日期-时间组件方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、日期/时间组件方法")]),t._v(" "),r("h2",{attrs:{id:"_5-4-regexp-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-regexp-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.4 RegExp 类型")]),t._v(" "),r("h3",{attrs:{id:"_1、regexp-实例属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、regexp-实例属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、RegExp 实例属性")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("global")]),t._v(" "),r("pre",[r("code",[t._v("\t- 布尔值，表示是否设置了 g 标志\n")])])]),t._v(" "),r("li",[r("p",[t._v("ignoreCase")]),t._v(" "),r("pre",[r("code",[t._v("\t- 布尔值，表示是否设置了 i 标志\n")])])]),t._v(" "),r("li",[r("p",[t._v("lastIndex")]),t._v(" "),r("pre",[r("code",[t._v("\t- 整数，表示开始搜索下一个匹配项的字符位置，从 0 算起\n")])])]),t._v(" "),r("li",[r("p",[t._v("multiline")]),t._v(" "),r("pre",[r("code",[t._v("\t- 布尔值，表示是否设置了 m 标志\n")])])]),t._v(" "),r("li",[r("p",[t._v("source")]),t._v(" "),r("pre",[r("code",[t._v("\t- 正则表达式的字符串表示，按照字面量形式而非传入构造函数中的字符串模式返回\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_2、regexp-实例方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、regexp-实例方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、RegExp 实例方法")]),t._v(" "),r("ul",[r("li",[t._v("exec()")]),t._v(" "),r("li",[t._v("test()")])]),t._v(" "),r("h3",{attrs:{id:"_3、regexp-构造函数属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、regexp-构造函数属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、RegExp 构造函数属性")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("input")]),t._v(" "),r("pre",[r("code",[t._v("\t- 最近一次要匹配的字符串\n")])])]),t._v(" "),r("li",[r("p",[t._v("lastMatch")]),t._v(" "),r("pre",[r("code",[t._v("\t- 最近一次的匹配项\n")])])]),t._v(" "),r("li",[r("p",[t._v("lastParen")]),t._v(" "),r("pre",[r("code",[t._v("\t- 最近一次匹配的捕获组\n")])])]),t._v(" "),r("li",[r("p",[t._v("leftContext")]),t._v(" "),r("pre",[r("code",[t._v("\t- input字符串中lastMatch之前的文本\n")])])]),t._v(" "),r("li",[r("p",[t._v("multiline")]),t._v(" "),r("pre",[r("code",[t._v("\t- 布尔值，表示是否所有表达式都使用多行模式\n")])])]),t._v(" "),r("li",[r("p",[t._v("rightContext")]),t._v(" "),r("pre",[r("code",[t._v("\t- Input字符串中lastMatch之后的文本\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_4、模式的局限性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、模式的局限性","aria-hidden":"true"}},[t._v("#")]),t._v(" 4、模式的局限性")]),t._v(" "),r("ul",[r("li",[t._v("匹配字符串开始和结尾的\\A 和\\Z 锚")]),t._v(" "),r("li",[t._v("向后查找")]),t._v(" "),r("li",[t._v("并集和交集类")]),t._v(" "),r("li",[t._v("原子组")]),t._v(" "),r("li",[t._v("Unicode 支持")]),t._v(" "),r("li",[t._v("命名的捕获组")]),t._v(" "),r("li",[t._v("s(single，单行)和 x(free-spacing，无间隔)匹配模式")]),t._v(" "),r("li",[t._v("条件匹配")]),t._v(" "),r("li",[t._v("正则表达式注释")])]),t._v(" "),r("h2",{attrs:{id:"_5-5-function-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-5-function-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.5 Function 类型")]),t._v(" "),r("h3",{attrs:{id:"_1、没有重载-深入理解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、没有重载-深入理解","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、没有重载(深入理解)")]),t._v(" "),r("ul",[r("li",[t._v("没有函数重载，后面的函数会覆盖前面的函数")])]),t._v(" "),r("h3",{attrs:{id:"_2、函数声明与函数表达式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、函数声明与函数表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、函数声明与函数表达式")]),t._v(" "),r("ul",[r("li",[t._v("函数声明能提升，函数表达式不能提升")])]),t._v(" "),r("h3",{attrs:{id:"_3、作为值的函数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、作为值的函数","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、作为值的函数")]),t._v(" "),r("h3",{attrs:{id:"_4、函数内部属性"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4、函数内部属性","aria-hidden":"true"}},[t._v("#")]),t._v(" 4、函数内部属性")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("arguments")]),t._v(" "),r("pre",[r("code",[t._v("\t- 保存函数参数\n")])])]),t._v(" "),r("li",[r("p",[t._v("this")])])]),t._v(" "),r("h3",{attrs:{id:"_5、函数属性和方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5、函数属性和方法","aria-hidden":"true"}},[t._v("#")]),t._v(" 5、函数属性和方法")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("属性")]),t._v(" "),r("pre",[r("code",[t._v("\t- length\n\t- prototype\n")])])]),t._v(" "),r("li",[r("p",[t._v("方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- call(this,...,)\n\t- apply(this,[])\n\t- bind()\n")])])])]),t._v(" "),r("h2",{attrs:{id:"_5-6-基本包装类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-6-基本包装类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.6 基本包装类型")]),t._v(" "),r("h3",{attrs:{id:"_1、boolean-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、boolean-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、Boolean 类型")]),t._v(" "),r("h3",{attrs:{id:"_2、number-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、number-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、Number 类型")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("valueOf()")])]),t._v(" "),r("li",[r("p",[t._v("toLocaleString()")])]),t._v(" "),r("li",[r("p",[t._v("toString()")])]),t._v(" "),r("li",[r("p",[t._v("toFixed()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 按照指定的小数位返回数值的字符串表示\n")])])]),t._v(" "),r("li",[r("p",[t._v("toExponential()")]),t._v(" "),r("pre",[r("code",[t._v("\t- 返回以指数表示法\n")])])])]),t._v(" "),r("h3",{attrs:{id:"_3、string-类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3、string-类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 3、String 类型")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("(1)new String() 过程")]),t._v(" "),r("pre",[r("code",[t._v("\t- 第一步: 创建 String 类型的一个实例\n\t- 第二步:在实例上调用指定的方法\n\t- 第三步: 销毁这个实例\n")])])]),t._v(" "),r("li",[r("p",[t._v("(2)字符方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- chartAt()\n\n\t\t- 以单字符字符串的形式返回给定位置的那个字符\n\n\t- chartCodeAt()\n\n\t\t- 返回字符编码\n\n\t- stringValue([])\n")])])]),t._v(" "),r("li",[r("p",[t._v("(3)字符串操作方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- concat()\n\t- slice()\n\n\t\t- 第一个参数指定字符串的开始位置\n\t\t- 负值\n\n\t\t\t- 将传 入的负值与字符串的长度相加\n\n\t- substr()\n\n\t\t- 第一个参数指定字符串的开始位置，第二个参数指定返回的字符个数\n\t\t- 负值\n\n\t\t\t- 将负的第一个参数加上字符串的长度，而将负的第二个 参数转换为 0\n\n\t- substring()\n\n\t\t- 第一个参数指定字符串的开始位置\n\t\t- 负值\n\n\t\t\t- 把所有负值参数都转换为 0,将较小的数作为开始位置，将较大的数作为结束位\n")])])]),t._v(" "),r("li",[r("p",[t._v("(4)字符串位置方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- indexOf()\n\n\t\t- 返回子字符串的位置，如果没有找到该字符串，则返回 -1\n\n\t- lastIndexOf()\n\n\t\t- 返回子字符串的位置，如果没有找到该字符串，则返回 -1\n")])])]),t._v(" "),r("li",[r("p",[t._v("(5)trim()方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- 创建一个字符串的副本，删除前置及 后缀的所有空格，然后返回结果,原始字符串中的前置及后缀空格会保持不变\n")])])]),t._v(" "),r("li",[r("p",[t._v("(6)字符串大小写转换方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- toLowerCase() 小写\n\t- toLocaleLowerCase() 小写\n\t- toUpperCase() 大写\n\t- toLocaleUpperCase() 大写\n")])])]),t._v(" "),r("li",[r("p",[t._v("(7)字符串的模式匹配方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- match()，如果没有找到匹配项，返回 -1\n\t- replace()\n\t- split()\n")])])]),t._v(" "),r("li",[r("p",[t._v("(8)localeCompare()方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- 如果字符串在字母表中应该排在字符串参数之前，则返回一个负数\n\t- 如果字符串等于字符串参数，则返回 0\n\t- 如果字符串在字母表中应该排在字符串参数之后，则返回一个正数\n")])])]),t._v(" "),r("li",[r("p",[t._v("(9)fromCharCode()方法")])]),t._v(" "),r("li",[r("p",[t._v("(10)HTML 方法")])])]),t._v(" "),r("h2",{attrs:{id:"_5-7-单体内置对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-7-单体内置对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.7 单体内置对象")]),t._v(" "),r("h3",{attrs:{id:"_1、global-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1、global-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 1、Global 对象")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("(1)URI 编码方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- encodeURI()\n\t- encodeURIComponent()\n")])])]),t._v(" "),r("li",[r("p",[t._v("(2)eval()方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- 在 eval()中创建的任何变量或函数都不会被提升，因为在解析代码的时候，它们被包含在一个字 符串中;它们只在 eval()执行的时候创建\n")])])]),t._v(" "),r("li",[r("p",[t._v("(3)属性")]),t._v(" "),r("pre",[r("code",[t._v("\t- undefined\n\t- NaN\n\t- Infinity\n\t- Object\n\t- Array\n\t- Function\n\t- Boolean\n\t- String\n\t- Number\n\t- Date\n\t- RegExp\n\t- Error\n\t- EvalError\n\t- rangeError\n\t- ReferenceError\n\t- SyntaxError\n\t- TypeError\n\t- URIError\n")])])]),t._v(" "),r("li",[r("p",[t._v("(4)window 对象")])])]),t._v(" "),r("h3",{attrs:{id:"_2、math-对象"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2、math-对象","aria-hidden":"true"}},[t._v("#")]),t._v(" 2、Math 对象")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("(1)Math 对象的属性")])]),t._v(" "),r("li",[r("p",[t._v("(2)min() 和 max()方法")])]),t._v(" "),r("li",[r("p",[t._v("(3)舍入方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- Math.ceil()\n\n\t\t- 执行向上舍入，即它总是将数值向上舍入为最接近的整数\n\n\t- Math.floor()\n\n\t\t- 执行向下舍入，即它总是将数值向下舍入为最接近的整数\n\n\t- Math.round()\n\n\t\t- 执行标准舍入，即它总是将数值四舍五入为最接近的整数\n")])])]),t._v(" "),r("li",[r("p",[t._v("(4)random()方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- Math.random()\n\n\t\t- 返回大于等于 0 小于 1 的一个随机数\n")])])]),t._v(" "),r("li",[r("p",[t._v("(5)其他方法")]),t._v(" "),r("pre",[r("code",[t._v("\t- Math.abs(num)\n\n\t\t- 返回num 的绝对值\n")])])])]),t._v(" "),r("h2",{attrs:{id:"_5-8-小结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-8-小结","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.8 小结")]),t._v(" "),r("h3",{attrs:{id:"引用类型与传统面向对象程序设计中的类相似，但实现不同"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#引用类型与传统面向对象程序设计中的类相似，但实现不同","aria-hidden":"true"}},[t._v("#")]),t._v(" 引用类型与传统面向对象程序设计中的类相似，但实现不同")]),t._v(" "),r("h3",{attrs:{id:"object-是一个基础类型，其他所有类型都从-object-继承了基本的行为"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#object-是一个基础类型，其他所有类型都从-object-继承了基本的行为","aria-hidden":"true"}},[t._v("#")]),t._v(" Object 是一个基础类型，其他所有类型都从 Object 继承了基本的行为")]),t._v(" "),r("h3",{attrs:{id:"array-类型是一组值的有序列表，同时还提供了操作和转换这些值的功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#array-类型是一组值的有序列表，同时还提供了操作和转换这些值的功能","aria-hidden":"true"}},[t._v("#")]),t._v(" Array 类型是一组值的有序列表，同时还提供了操作和转换这些值的功能")]),t._v(" "),r("h3",{attrs:{id:"date-类型提供了有关日期和时间的信息，包括当前日期和时间以及相关的计算功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#date-类型提供了有关日期和时间的信息，包括当前日期和时间以及相关的计算功能","aria-hidden":"true"}},[t._v("#")]),t._v(" Date 类型提供了有关日期和时间的信息，包括当前日期和时间以及相关的计算功能")]),t._v(" "),r("h3",{attrs:{id:"regexp-类型是-ecmascript-支持正则表达式的一个接口，提供了最基本的和一些高级的正则表-达式功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#regexp-类型是-ecmascript-支持正则表达式的一个接口，提供了最基本的和一些高级的正则表-达式功能","aria-hidden":"true"}},[t._v("#")]),t._v(" RegExp 类型是 ECMAScript 支持正则表达式的一个接口，提供了最基本的和一些高级的正则表 达式功能")]),t._v(" "),r("h3",{attrs:{id:"函数是对象，所以函数也拥有方法，可以用来增强其行为"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#函数是对象，所以函数也拥有方法，可以用来增强其行为","aria-hidden":"true"}},[t._v("#")]),t._v(" 函数是对象，所以函数也拥有方法，可以用来增强其行为")]),t._v(" "),r("h3",{attrs:{id:"基本包装类型"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#基本包装类型","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本包装类型")]),t._v(" "),r("ul",[r("li",[t._v("每个包装类型都映射到同名的基本类型")]),t._v(" "),r("li",[t._v("在读取模式下访问基本类型值时，就会创建对应的基本包装类型的一个对象，从而方便了数据的操作")]),t._v(" "),r("li",[t._v("操作基本类型值的语句一经执行完毕，就会立即销毁新创建的包装对象")])]),t._v(" "),r("h3",{attrs:{id:"在所有代码执行之前，作用域中就已经存在两个内置对象-global-和-math"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#在所有代码执行之前，作用域中就已经存在两个内置对象-global-和-math","aria-hidden":"true"}},[t._v("#")]),t._v(" 在所有代码执行之前，作用域中就已经存在两个内置对象:Global 和 Math")])])}),[],!1,null,null,null);a.default=_.exports}}]);